using System.IO.Compression;
using System.Text.RegularExpressions;
using webapi.ProjectSearch.Models.ProjectReport;

namespace webapi.ProjectSearch.Services.Extractor.ZipToDBExtract;

public class PentestTeamExtractor
{
    private readonly Dictionary<string, ProjectInformationParticipant> pentestTeamDictionary;
    private readonly ZipArchiveEntry pentestTeamEntry;

    public PentestTeamExtractor(ZipArchiveEntry pentestTeamEntry)
    {
        this.pentestTeamEntry = pentestTeamEntry;
        pentestTeamDictionary = new Dictionary<string, ProjectInformationParticipant>();
    }

    public Dictionary<string, ProjectInformationParticipant> ExtractPentestTeam()
    {
        char[] lineDelimiters = { '{', '}' };
        var pentestOrgCodes = false;
        string line;
        if (pentestTeamEntry == null)
            throw new ArgumentNullException();
        using (var reader = new StreamReader(pentestTeamEntry.Open()))
        {
            while ((line = reader.ReadLine()) != null)
                if (!string.IsNullOrEmpty(line))
                {
                    var trimmedLine = line.Trim();
                    var firstTwoChars = trimmedLine.Length > 1 ? trimmedLine[0].ToString() + trimmedLine[1] : "";
                    if (trimmedLine[0] == '\\')
                    {
                        var inLineContents = trimmedLine.Split(lineDelimiters, StringSplitOptions.RemoveEmptyEntries);

                        if (pentestOrgCodes)
                        {
                            if (inLineContents.Length == 3)
                                SetParticipantDepartment(inLineContents);
                            else
                                /*If the string is not split into three parts, that means that something else
                                     than the ORGCodes were written (if the config file structure was not changed).
                                     This is easy to break, but it will only result in not having the departments translated.
                                    So please do not do that. When you write comment "%%Pentest ORG Codes", write all of
                                    the departments you have, without defining new commands between them.*/
                                pentestOrgCodes = false;
                        }
                        else
                        {
                            addParticipant(inLineContents);
                        }
                    }
                    else if (firstTwoChars == "%%")
                    {
                        var str = Regex.Replace(line.Trim(), @"\s+", "");
                        if (str == "%%PentestORGCodes") pentestOrgCodes = true;
                    }
                }
        }

        return pentestTeamDictionary;
    }

    private string extractDepartment(string data)
    {
        var result = "";
        var delimiter = "\\";
        var editedString = data.Split(delimiter, StringSplitOptions.RemoveEmptyEntries);
        foreach (var str in editedString) result += str;

        return result;
    }

    private string extractContact(string data)
    {
        return data.Substring(9);
    }

    private void addParticipant(string[] inLineContents)
    {
        var bracketDelimiters = '&';

        if (inLineContents.Length == 5)
            if (inLineContents[0] == "\\newcommand")
                if (!pentestTeamDictionary.ContainsKey(inLineContents[1]))
                {
                    var inBracketContents =
                        (inLineContents[2].Substring(0, inLineContents[2].Length - 5) + inLineContents[3]).Split(
                            bracketDelimiters, StringSplitOptions.RemoveEmptyEntries);
                    var newParticipant = new ProjectInformationParticipant();
                    newParticipant.Name = inBracketContents[0].Trim();
                    newParticipant.Department = inBracketContents[1].Trim();
                    newParticipant.Contact = extractContact(inBracketContents[2].Trim());
                    pentestTeamDictionary.Add(inLineContents[1], newParticipant);
                }
    }

    /*This method is used when we are reading PentestORGCodes. Which are commands, which translate to
     various departments that the participant is in.
    The method checks one line, which should consist of the command, and what it translates to.
    When the command is read, method iterates through every participant, and checks whether the commands
    (which are employees current department) are equal, if they are, it replaces the command in employees
    department to a string it translates to.
    It should be run after all of the participants were defined.*/
    private void SetParticipantDepartment(string[] inLineContents)
    {
        foreach (var participant in pentestTeamDictionary.Values)
            if (participant != null && participant.Department == inLineContents[1])
                participant.Department = extractDepartment(inLineContents[2]);
    }
}