using System.IO.Compression;
using System.Text.RegularExpressions;
using webapi.Models.ProjectReport;

namespace webapi.ProjectSearch.Services.Extractor.ZipToDBExtract
{
    public class PentestTeamExtractor
    {
        private ZipArchiveEntry pentestTeamEntry;
        readonly Dictionary<string, ProjectInformationParticipant> pentestTeamDictionary;

        public PentestTeamExtractor(ZipArchiveEntry pentestTeamEntry)
        {
            this.pentestTeamEntry = pentestTeamEntry;
            pentestTeamDictionary = new Dictionary<string, ProjectInformationParticipant>();
        }

        public Dictionary<string, ProjectInformationParticipant> ExtractPentestTeam()
        {
            string memberRegex = @"^(?!%\s*)\\newcommand{\\([\S]*)}\s*{([\s\S]*?)}{[\s\S]*?\\footnotemark\[1\]}}";
            string orgCodeRegex = @"^(?!%)\\newcommand{(\\[A-Za-z]+)}{([^{}]*)}";
            string inLineContentRegex = @"([\s\S]*?)&[\s]*?\\href{mailto:\/\/([\s\S]*?)}";
            char[] lineDelimiters = { '{', '}' };
            bool pentestOrgCodes = false;
            string line;
            if (pentestTeamEntry == null)
            {
                throw new ArgumentNullException();
            }
            else
            {
                using (StreamReader reader = new StreamReader(pentestTeamEntry.Open()))
                {
                    string fileContent = reader.ReadToEnd();
                    MatchCollection memberMatches = Regex.Matches(fileContent, memberRegex, RegexOptions.Multiline);
                    MatchCollection orgCodesMatches = Regex.Matches(fileContent, orgCodeRegex, RegexOptions.Multiline);
                    //MatchCollection memberMatches = Regex.Matches(fileContent, inLineContentRegex);

                    foreach(Match match in memberMatches)
                    {
                        ProjectInformationParticipant newProjectInformationParticipant = new ProjectInformationParticipant();
                        Match lineContent = Regex.Match(match.Value.ToString(), inLineContentRegex);
                        string[] delimiters = { "&", "{", "}" };
                        string[] splitString = match.Value.ToString().Split(delimiters, StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries);
                        newProjectInformationParticipant.Name = splitString[2];
                        newProjectInformationParticipant.Department = splitString[3];
                        newProjectInformationParticipant.Contact = splitString[5].Split(new[] { "//" }, StringSplitOptions.None)[1];
                        pentestTeamDictionary.Add(splitString[1], newProjectInformationParticipant);
                    }

                    foreach(Match departmentMatch in orgCodesMatches)
                    {
                        foreach(ProjectInformationParticipant newProjectInformationParticipant in pentestTeamDictionary.Values)
                        {
                            if (newProjectInformationParticipant.Department == departmentMatch.Groups[1].ToString())
                            {
                                newProjectInformationParticipant.Department = departmentMatch.Groups[2].ToString();
                            }
                        }
                    }

                    /*while ((line = reader.ReadLine()) != null)
                    {
                        if (!string.IsNullOrEmpty(line))
                        {
                            string trimmedLine = line.Trim();
                            string firstTwoChars = trimmedLine.Length > 1 ? trimmedLine[0].ToString() + trimmedLine[1] : "";
                            if (trimmedLine[0] == '\\')
                            {
                                string[] inLineContents = trimmedLine.Split(lineDelimiters, StringSplitOptions.RemoveEmptyEntries);

                                if (pentestOrgCodes)
                                {
                                    if (inLineContents.Length == 3)
                                    {
                                        SetParticipantDepartment(inLineContents);
                                    }
                                    else
                                    {
                                        /*If the string is not split into three parts, that means that something else
                                         than the ORGCodes were written (if the config file structure was not changed).
                                         This is easy to break, but it will only result in not having the departments translated.
                                        So please do not do that. When you write comment "%%Pentest ORG Codes", write all of 
                                        the departments you have, without defining new commands between them.
                                        pentestOrgCodes = false;
                                    }
                                }
                                else
                                {
                                    addParticipant(inLineContents);
                                }
                            }
                            else if (firstTwoChars == "%%")
                            {
                                string str = Regex.Replace(line.Trim(), @"\s+", "");
                                if (str == "%%PentestORGCodes")
                                {
                                    pentestOrgCodes = true;
                                }
                            }
                        }
                    }*/
                }
            }
            return pentestTeamDictionary;
        }

        private string extractDepartment(string data)
        {
            string result = "";
            string delimiter = "\\";
            string[] editedString = data.Split(delimiter, StringSplitOptions.RemoveEmptyEntries);
            foreach (string str in editedString)
            {
                result += str;
            }

            return result;
        }

        private string extractContact(string data)
        {
            return data.Substring(9);
        }

        private void addParticipant(string[] inLineContents)
        {
            char bracketDelimiters = '&';

            if (inLineContents.Length == 5)
            {
                if (inLineContents[0] == "\\newcommand")
                {
                    if (!pentestTeamDictionary.ContainsKey(inLineContents[1]))
                    {
                        string[] inBracketContents = (inLineContents[2].Substring(0, inLineContents[2].Length - 5) + inLineContents[3]).Split(
                            bracketDelimiters, StringSplitOptions.RemoveEmptyEntries);
                        ProjectInformationParticipant newParticipant = new ProjectInformationParticipant();
                        newParticipant.Name = inBracketContents[0].Trim();
                        newParticipant.Department = inBracketContents[1].Trim();
                        newParticipant.Contact = extractContact(inBracketContents[2].Trim());
                        pentestTeamDictionary.Add(inLineContents[1], newParticipant);
                    }
                }
            }
        }

        /*This method is used when we are reading PentestORGCodes. Which are commands, which translate to
         various departments that the participant is in. 
        The method checks one line, which should consist of the command, and what it translates to.
        When the command is read, method iterates through every participant, and checks whether the commands
        (which are employees current department) are equal, if they are, it replaces the command in employees
        department to a string it translates to.
        It should be run after all of the participants were defined.*/
        private void SetParticipantDepartment(string[] inLineContents)
        {
            foreach (ProjectInformationParticipant participant in pentestTeamDictionary.Values)
            {
                if (participant != null && participant.Department == inLineContents[1])
                {
                    participant.Department = extractDepartment(inLineContents[2]);
                }
            }
        }

    }
}
